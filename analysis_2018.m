%% this is where I will build my final analysis for the project

% Using a 902 cortical ROI x 35 ROI cerebellum file generated by conn_full_rois.
%
% Below are the settings I used:
% civet_format = 1;
% tr_s = 0.7;
% tr_n = 1200;
% filt_lo_hz = 0.009;
% filt_hi_hz = 0.08;
% filt_order = 100;
% tested_runs = [1, 2, 3, 4];
% update_func = 1;
% update_volu = 1;
% update_grey = 1;
% use_ctx_mask = 1;
% use_filter = 1;

addpath(genpath('/home/jdv/code/cerebellum'))
%inname = 'compcor-1000-dil_nopass_func-volu-grey_vertex_CV_proc.mat';
load('curr-ana-final-1000_2018.mat');
%outname = 'curr-ana-final-1000_2018.mat';
parpool

g_volu_ctx = corr(ctx_volu);
g_volu_sub = corr(sub_volu);
g_thck_ctx = corr(ctx_thck);
g_thck_sub = corr(sub_thck);
g_grey_ctx = corr(ctx_grey);
g_grey_sub = corr(sub_grey);
g_func_ctx = calc_g_func(ctx_func, nsub*nrun);
g_func_sub = calc_g_func(sub_func, nsub*nrun);
g_func_sub_2ndord = corr(r_func');
g_volu_sub_2ndord = corr(g_volu');
g_thck_sub_2ndord = corr(g_thck');

% Q1 -- overview of data
figure; % data-overview.fig
subplot(2,3,1); [H, T, perm] = dendrogram_plot(g_func_ctx, [], [], 1, 1);
subplot(2,3,2); dendrogram_plot(g_volu_ctx, [], perm, 1, 1);
subplot(2,3,3); dendrogram_plot(g_thck_ctx, [], perm, 1, 1);
subplot(2,3,4); [H, T, perm] = dendrogram_plot(r_func, labels, [], 0.5, 0);
subplot(2,3,5); dendrogram_plot(g_volu, labels, perm, 0.5, 0);
subplot(2,3,6); dendrogram_plot(g_thck, labels, perm, 0.5, 0);

% Q2 Structrure function at ROI level
n_iter = 10000;
[func_volu_rs, func_volu_ps, func_volu_sig] = permutation_test(g_func, g_volu, n_iter);
[func_thck_rs, func_thck_ps, func_thck_sig] = permutation_test(g_func, g_thck, n_iter);
[volu_thck_rs, volu_thck_ps, volu_thck_sig] = permutation_test(g_volu, g_thck, n_iter);

figure; % func-struct-roi.fig
subplot(3,1,1)
plot_labels = star_labels(labels, func_volu_sig');
bar(func_volu_rs, 'FaceColor', [0 0 0], 'EdgeColor', [0 0 0]);
set(gca, 'xtick', [1:35]);
set(gca, 'xticklabel', plot_labels);
xlim([0.5 35.5])
ylim([-0.4 0.4])

subplot(3,1,2)
plot_labels = star_labels(labels, func_thck_sig');
bar(func_thck_rs, 'FaceColor', [0 0 0], 'EdgeColor', [0 0 0]);
set(gca, 'xtick', [1:35]);
set(gca, 'xticklabel', plot_labels);
xlim([0.5 35.5])
ylim([-0.4 0.4])

subplot(3,1,3)
plot_labels = star_labels(labels, volu_thck_sig');
bar(volu_thck_rs, 'FaceColor', [0 0 0], 'EdgeColor', [0 0 0]);
set(gca, 'xtick', [1:35]);
set(gca, 'xticklabel', plot_labels);
xlim([0.5 35.5])
ylim([0 0.5])

% cortical atlas -- for mappings
fname = fopen(['ctx_roi_civ.L.1D'], 'rt');
fdata = textscan(fname, '%f%f%f%f%f%f%f', 'Whitespace', ' ', 'MultipleDelimsAsOne', 1, 'HeaderLines', 5);
ctx_tmp_maskL = fdata{7};
fclose(fname);
fname = fopen(['ctx_roi_civ.R.1D'], 'rt');
fdata = textscan(fname, '%f%f%f%f%f%f%f', 'Whitespace', ' ', 'MultipleDelimsAsOne', 1, 'HeaderLines', 5);
ctx_tmp_maskR = fdata{7};
fclose(fname);

ctx_mask = [ctx_tmp_maskL; ctx_tmp_maskR];
ctx_rois = unique(ctx_mask(ctx_mask > 0));

% export
%idx_to_nifti('100307/T1w/parcellation_1000-dil.nii.gz', func_volu_ctx_rs, ctx_rois, 'ctx-func-volu.nii.gz');
%idx_to_nifti('100307/T1w/parcellation_1000-dil.nii.gz', func_thck_ctx_rs, ctx_rois, 'ctx-func-thck.nii.gz');
idx_to_nifti('100307/proc/smoothmask.01.nii.gz', func_volu_rs, [], 'cere-func-volu.nii.gz');
idx_to_nifti('100307/proc/smoothmask.01.nii.gz', func_thck_rs, [], 'cere-func-thck.nii.gz');
idx_to_nifti('100307/proc/smoothmask.01.nii.gz', volu_thck_rs, [], 'cere-volu-thck.nii.gz');

% Q3: cross-modal similarity of clustering
clst_sub = [2:1:10];

inst_func = clusterestimate(g_func, clst_sub, n_iter);
inst_thck = clusterestimate(g_thck, clst_sub, n_iter);
inst_volu = clusterestimate(g_volu, clst_sub, n_iter);

figure;
errorbar(inst_func.mean, inst_func.sd, 'linewidth', 2, 'color', 'black');
hold on;
errorbar(inst_thck.mean, inst_thck.sd, 'linewidth', 2, 'color', 'red');
errorbar(inst_volu.mean, inst_volu.sd, 'linewidth', 2, 'color', 'blue');
set(gca, 'xtick', [1:length(clst_sub)]);
set(gca, 'xticklabel', clst_sub);
ylim([0 1])
legend('BOLD correlations', 'Volume-thickness covariance', 'Volume-volume covariance')
xlabel('instability')
ylabel('number of clusters')

% Q4: determine how similar clustering of the cerebellum is across the 3 methods
% obvious best number of clusters is 2
dist_fxn = 'euclidean';
link_fxn = 'ward';
n = 2;

func_Y = pdist(g_func, dist_fxn);
func_Z = linkage(func_Y, link_fxn);
func_C = cluster(func_Z,'maxclust', n);

thck_Y = pdist(g_thck, dist_fxn);
thck_Z = linkage(thck_Y, link_fxn);
thck_C = cluster(thck_Z,'maxclust', n);

volu_Y = pdist(g_volu, dist_fxn);
volu_Z = linkage(volu_Y, link_fxn);
volu_C = cluster(volu_Z,'maxclust', n);


% aligned to functional data
mappings = match_labels(thck_C, func_C);
thck_C_out = zeros(length(thck_C), 1);
for x = 1:n;
    idx = find(thck_C == x);
    thck_C_out(idx) = mappings(x);
end
thck_C = thck_C_out;

mappings = match_labels(volu_C, func_C);
volu_C_out = zeros(length(volu_C), 1);
for x = 1:n;
    idx = find(volu_C == x);
    volu_C_out(idx) = mappings(x);
end
volu_C = volu_C_out;

all_C = [func_C, thck_C, volu_C];
squareform(pdist(all_C', 'hamming'))
%ans =
%
%         0    0.4571    0.4571
%    0.4571         0    0.7429
%    0.4571    0.7429         0

% aligned to volume-thickness data
mappings = match_labels(volu_C, thck_C);
volu_C_out = zeros(length(volu_C), 1);
for x = 1:n;
    idx = find(volu_C == x);
    volu_C_out(idx) = mappings(x);
end
volu_C_to_thck = volu_C_out;

mappings = match_labels(func_C, thck_C);
func_C_out = zeros(length(volu_C), 1);
for x = 1:n;
    idx = find(func_C == x);
    func_C_out(idx) = mappings(x);
end
func_C_to_thck = func_C_out;

all_C = [func_C_to_thck, thck_C, volu_C_to_thck];
squareform(pdist(all_C', 'hamming'))
%ans =
%
%         0    0.4571    0.5429
%    0.4571         0    0.2571
%    0.5429    0.2571         0

idx_to_nifti('100307/proc/smoothmask.01.nii.gz', func_C, [], 'cere_networks_func.nii.gz');
idx_to_nifti('100307/proc/smoothmask.01.nii.gz', thck_C, [], 'cere_networks_thck.nii.gz');
idx_to_nifti('100307/proc/smoothmask.01.nii.gz', volu_C, [], 'cere_networks_volu.nii.gz');
idx_to_nifti('100307/proc/smoothmask.01.nii.gz', volu_C_to_thck, [], 'cere_networks_volu-to-thck.nii.gz');

print_cluster_rois(sub_rois, func_C', labels)
print_cluster_rois(sub_rois, thck_C', labels)
print_cluster_rois(sub_rois, volu_C', labels)

sparseness = 0.1;

g_func_sparse = make_sparse(g_func, sparseness);
g_volu_sparse = make_sparse(g_volu, sparseness);
g_thck_sparse = make_sparse(g_thck, sparseness);

% q: should I merge by individual cluster patterns, or by the func cluster patterns
ctx_merged_func_func_clust = make_sparse(merge_by_cluster(g_func, func_C'), sparseness);
ctx_merged_thck_thck_clust = make_sparse(merge_by_cluster(g_thck, thck_C'), sparseness);
ctx_merged_volu_volu_clust = make_sparse(merge_by_cluster(g_volu, volu_C'), sparseness);
ctx_merged_thck_func_clust = make_sparse(merge_by_cluster(g_thck, func_C'), sparseness);
ctx_merged_volu_func_clust = make_sparse(merge_by_cluster(g_volu, func_C'), sparseness);

ctx_func_netlabels_func_clust = label_networks(ctx_merged_func_func_clust);
ctx_thck_netlabels_thck_clust = label_networks(ctx_merged_thck_thck_clust);
ctx_volu_netlabels_volu_clust = label_networks(ctx_merged_volu_volu_clust);
ctx_thck_netlabels_func_clust = label_networks(ctx_merged_thck_func_clust);
ctx_volu_netlabels_func_clust = label_networks(ctx_merged_volu_func_clust);

%print_out_data('100307/T1w/parcellation_1000-dil.nii.gz', ctx_merged_func, ctx_rois, 'ctx-mean-corrs-func-');
%print_out_data('100307/T1w/parcellation_1000-dil.nii.gz', ctx_merged_thck, ctx_rois, 'ctx-mean-corrs-thck-');
%print_out_data('100307/T1w/parcellation_1000-dil.nii.gz', ctx_merged_volu, ctx_rois, 'ctx-mean-corrs-volu-');

%print_out_data('100307/T1w/parcellation_1000-dil.nii.gz', ctx_merged_func_sparse, ctx_rois, 'ctx-mean-corrs-func-sparse-');
%print_out_data('100307/T1w/parcellation_1000-dil.nii.gz', ctx_merged_thck_sparse, ctx_rois, 'ctx-mean-corrs-thck-sparse-');
%print_out_data('100307/T1w/parcellation_1000-dil.nii.gz', ctx_merged_volu_sparse, ctx_rois, 'ctx-mean-corrs-volu-sparse-');

print_out_data('100307/T1w/parcellation_1000-dil.nii.gz', ctx_func_netlabels_func_clust, ctx_rois, 'ctx_labels_func_func_clust_');
print_out_data('100307/T1w/parcellation_1000-dil.nii.gz', ctx_thck_netlabels_thck_clust, ctx_rois, 'ctx_labels_thck_thck_clust_');
print_out_data('100307/T1w/parcellation_1000-dil.nii.gz', ctx_volu_netlabels_volu_clust, ctx_rois, 'ctx_labels_volu_volu_clust_');
print_out_data('100307/T1w/parcellation_1000-dil.nii.gz', ctx_thck_netlabels_func_clust, ctx_rois, 'ctx_labels_thck_func_clust_');
print_out_data('100307/T1w/parcellation_1000-dil.nii.gz', ctx_volu_netlabels_func_clust, ctx_rois, 'ctx_labels_volu_func_clust_');

%save(outname, '-v7.3')
% eva marder -- carb connectivity
% marcus richel
